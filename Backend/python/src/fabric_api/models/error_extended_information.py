# coding: utf-8

"""
    Workload REST APIs

    APIs to be implemented by workloads for integration with Microsoft Fabric

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fabric_api.models.name_value_pair import NameValuePair
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ErrorExtendedInformation(BaseModel):
    """
    The extended error information.
    """ # noqa: E501
    additional_parameters: Optional[List[NameValuePair]] = Field(default=None, description="A list of additional parameters specific to the error.", alias="additionalParameters")
    error_code: StrictStr = Field(description="The error code.", alias="errorCode")
    message: StrictStr = Field(description="The error message.")
    message_parameters: Optional[List[StrictStr]] = Field(default=None, description="A list of parameters for formatting a localized message.", alias="messageParameters")
    __properties: ClassVar[List[str]] = ["additionalParameters", "errorCode", "message", "messageParameters"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ErrorExtendedInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "additional_parameters",
                "error_code",
                "message",
                "message_parameters",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_parameters (list)
        _items = []
        if self.additional_parameters:
            for _item in self.additional_parameters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['additionalParameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ErrorExtendedInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalParameters": [NameValuePair.from_dict(_item) for _item in obj.get("additionalParameters")] if obj.get("additionalParameters") is not None else None,
            "errorCode": obj.get("errorCode"),
            "message": obj.get("message"),
            "messageParameters": obj.get("messageParameters")
        })
        return _obj


